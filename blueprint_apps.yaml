tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates infrastructure using Terraform.

imports:
  - http://cloudify.co/spec/cloudify/5.1.1/types.yaml
  - plugin:cloudify-terraform-plugin
  - db/db.yaml
  - s3/s3.yaml
  - k8s/k8s.yaml

inputs:
  terraform_executable:
    type: string
    default: { get_secret: terraform_executable }
  terraform_plugins_dir:
    type: string
    default: { get_secret: terraform_plugins_dir }
  module_source:
    type: string
  module_source_path:
    type: string
  variables:
    default: {}
  environment_variables:
    default: {}

node_templates:
  terraform:
    type: cloudify.nodes.terraform
    properties:
      resource_config:
        use_existing_resource: true
      terraform_config:
        executable_path: { get_input: terraform_executable }
        plugins_dir: { get_input: terraform_plugins_dir }

  terraform_module:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        environment_variables: { get_input: environment_variables }
        variables: { get_input: variables }
        source:
          location: { get_input: module_source }
        source_path: { get_input: module_source_path }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: tf.cloudify_tf.tasks.plan
          inputs:
            source: { get_property: [SELF, resource_config, source ] }
            source_path: { get_property: [SELF, resource_config, source_path ] }
            force: false

    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host

outputs:
  terraform:
    description: Terraform outputs
    value: { get_attribute: [ terraform_module, resources ] }

capabilities:
  k8s_endpoint:
    description: Kubernetes cluster's endpoint
    value: { concat: [ 'https://', { get_attribute: [ terraform_module, resources, eip, instances, 0, attributes, public_ip ] } ] }
  k8s_config:
    description: Kubernetes cluster's config
    value:
      file_content: { get_attribute: [ minikube, config ] }
  db_host:
    description: Database's host
    value: { get_attribute: [ terraform_module, resources, eip, instances, 0, attributes, public_ip ] }
  db_master_username:
    description: Database's master username
    value: { get_attribute: [ database, master_username ] }
  db_master_password:
    description: Database's master password
    value: { get_attribute: [ database, master_password ] }
  bucket_url:
    description: URL of S3 bucket
    value: { concat: [ 'http://', { get_attribute: [ terraform_module, resources, eip, instances, 0, attributes, public_ip ] }, ':9000/awsdevsmallbucket' ] }
